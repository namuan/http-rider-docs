<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HttpRider – Documentation</title>
    <link>/http-rider-docs/docs/</link>
    <description>Recent content in Documentation on HttpRider</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/http-rider-docs/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: How to navigate between HTTP requests history</title>
      <link>/http-rider-docs/docs/how-tos/005_http-exchanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/005_http-exchanges/</guid>
      <description>
        
        
        &lt;p&gt;HttpRider stores all the request/response (Http exchange) made for an API.
You can find it in the top right corner of the window.
Due to space limitation, you can only view the last 10 exchanges but clicking on any of the previous exchange button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/005/httprider-exchange-history.png&#34; alt=&#34;httprider-exchange-history&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is a quick demo of working with Http exchange history.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/005/httprider-exchange-history.gif&#34; alt=&#34;httprider-exchange-history&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to work with projects</title>
      <link>/http-rider-docs/docs/how-tos/010_project-workspaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/010_project-workspaces/</guid>
      <description>
        
        
        &lt;p&gt;In HttpRider, you can create and save new project workspaces.
When you start up HttpRider for the first time, it&amp;rsquo;ll automatically create a temporary project file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/010/httprider-temp-project-name.png&#34; alt=&#34;Temporary Project Name&#34;&gt;&lt;/p&gt;
&lt;p&gt;To save a project, click on &lt;code&gt;File -&amp;gt; Save&lt;/code&gt; or press keyboard shortcut &lt;code&gt;Ctrl/Cmd + S&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/010/httprider-save-project.png&#34; alt=&#34;Save Project&#34;&gt;&lt;/p&gt;
&lt;p&gt;To open an existing project, click on &lt;code&gt;File -&amp;gt; Open&lt;/code&gt; or press keyboard shortcut &lt;code&gt;Ctrl/Cmd + O&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/010/httprider-open-existing-project.png&#34; alt=&#34;Open Project&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can also save a copy of the currently opened project by using &lt;code&gt;File -&amp;gt; Save As&lt;/code&gt; and give a different project name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/010/httprider-save-as-project.png&#34; alt=&#34;Save As&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to work with environment variables</title>
      <link>/http-rider-docs/docs/how-tos/015_environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/015_environment-variables/</guid>
      <description>
        
        
        &lt;p&gt;In this section, we&amp;rsquo;ll look at environment variables and how you can use them in API requests.
Here are the two options in the toolbar which deals with configuring environments and switching between environments.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/015/httprider-environments-menu.png&#34; alt=&#34;Environments Menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you click on the button to configure environment, it&amp;rsquo;ll open up a dialog box with all the configured environments.&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Please note that pressing &lt;code&gt;ESC&lt;/code&gt; will close the environments dialog.&lt;/p&gt;

&lt;/div&gt;

&lt;h4 id=&#34;creating-a-new-environment-&#34;&gt;Creating a new environment :&lt;/h4&gt;
&lt;p&gt;Click on the button to configure environments.
If there are no environments configured then it&amp;rsquo;ll create a new &amp;lsquo;Default&amp;rsquo; environment with a single environment variable.
You can also click on the &lt;code&gt;+&lt;/code&gt; button to add a new environment.
The environment name is auto-generated but you can double click on the name to change it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/015/httprider-create-new-environment.gif&#34; alt=&#34;Adding New Environment&#34;&gt;&lt;/p&gt;
&lt;p&gt;#### Copying an existing environment:&lt;/p&gt;
&lt;p&gt;Click on the &lt;code&gt;++&lt;/code&gt; button to copy an existing environment along with all the environment variables.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/015/httprider-copy-existing-environment.gif&#34; alt=&#34;Copy Existing Environment&#34;&gt;&lt;/p&gt;
&lt;p&gt;#### Deleting an environment:&lt;/p&gt;
&lt;p&gt;Click on the &lt;code&gt;-&lt;/code&gt; button to delete an existing environment.&lt;/p&gt;
&lt;h4 id=&#34;switching-between-environments&#34;&gt;Switching between environments:&lt;/h4&gt;
&lt;p&gt;A new environment can be selected from the main screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/015/httprider-switch-environment.gif&#34; alt=&#34;Switch Environment&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;using-environment-variables&#34;&gt;Using environment variables:&lt;/h4&gt;
&lt;p&gt;An environment variable can be used in setting up the endpoint, any header or query param value or even in the request body.
You can also define a dynamic enviornment variable whose value changes between each request.
This is useful to define a random variable.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Ctrl/Cmd + G&lt;/code&gt; or press &lt;code&gt;$&lt;/code&gt; whereever you&amp;rsquo;d like to insert the value of the environment variable.
This key combination opens up a text box which will auto filter environment variables as soon as you start typing.
Once the environment variable is selected, press &lt;code&gt;Enter&lt;/code&gt; to insert the variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/015/httprider-use-environment-variables.gif&#34; alt=&#34;Using Environment Variables&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to work with variables with fake data variables</title>
      <link>/http-rider-docs/docs/how-tos/020_fake-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/020_fake-data/</guid>
      <description>
        
        
        &lt;p&gt;HttpRider provides an easy way to add Fake generated data in your API requests.
It uses the excellent &lt;a href=&#34;https://faker.readthedocs.io/en/master/&#34;&gt;Faker&lt;/a&gt; library to generate fake data.
Fake data can be inserted in the request header, query params, form params or body as part of JSON request.&lt;/p&gt;
&lt;p&gt;You can either press &lt;code&gt;$&lt;/code&gt; and then type &lt;code&gt;data&lt;/code&gt; which should open up the Fake data dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/020/httprider-fake-dialog-key-shortcut.png&#34; alt=&#34;Fake Data Dialog Keyboard Shortcut&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another way is to right click and select &lt;code&gt;Fake Data&lt;/code&gt; from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/020/httprider-fake-dialog-context-menu.png&#34; alt=&#34;Fake Data Dialog Context Menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;Currently, you can generate fake data for some common elements with support for more options is in the roadmap.
When selected, it&amp;rsquo;ll insert a function in-place to generate the dynamic value on each request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/020/httprider-use-fake-data-generator.gif&#34; alt=&#34;Using Fake Data Generator&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to work with API request chaining</title>
      <link>/http-rider-docs/docs/how-tos/025_api_request_chaining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/025_api_request_chaining/</guid>
      <description>
        
        
        &lt;p&gt;#### How it works?&lt;/p&gt;
&lt;h4 id=&#34;running-multiple-apis&#34;&gt;Running multiple APIs&lt;/h4&gt;
&lt;h4 id=&#34;disable-apis&#34;&gt;Disable APIs&lt;/h4&gt;
&lt;h4 id=&#34;extracting-variables-from-api-request&#34;&gt;Extracting variables from API request&lt;/h4&gt;
&lt;h4 id=&#34;using-variables-to-chain-apis&#34;&gt;Using variables to chain APIs&lt;/h4&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How do you group API(s) using labels</title>
      <link>/http-rider-docs/docs/how-tos/030_api_request_labelling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/030_api_request_labelling/</guid>
      <description>
        
        
        &lt;h4 id=&#34;labelling-apis&#34;&gt;Labelling APIs&lt;/h4&gt;
&lt;h4 id=&#34;filtering-apis-by-label&#34;&gt;Filtering APIs by Label&lt;/h4&gt;
&lt;h4 id=&#34;added-label-description&#34;&gt;Added Label description&lt;/h4&gt;
&lt;h4 id=&#34;run-apis-by-label&#34;&gt;Run APIs by Label&lt;/h4&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to test APIs with assertions</title>
      <link>/http-rider-docs/docs/how-tos/035_api_assertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/035_api_assertions/</guid>
      <description>
        
        
        &lt;h4 id=&#34;how-it-works&#34;&gt;How it works?&lt;/h4&gt;
&lt;p&gt;#### Assertions Dialog reference&lt;/p&gt;
&lt;p&gt;#### Extracting and naming variables&lt;/p&gt;
&lt;h4 id=&#34;using-variables&#34;&gt;Using variables&lt;/h4&gt;
&lt;h4 id=&#34;adding-custom-jsonpath-expressions&#34;&gt;Adding custom JsonPath expressions&lt;/h4&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How do you define mock API responses</title>
      <link>/http-rider-docs/docs/how-tos/040_mocking_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/040_mocking_apis/</guid>
      <description>
        
        
        &lt;h4 id=&#34;how-it-works&#34;&gt;How it works?&lt;/h4&gt;
&lt;h4 id=&#34;creating-a-simple-mock-response&#34;&gt;Creating a simple mock response&lt;/h4&gt;
&lt;h4 id=&#34;using-variables-in-mocked-responses&#34;&gt;Using variables in mocked responses&lt;/h4&gt;
&lt;h4 id=&#34;dynamic-mocks-using-request-variables&#34;&gt;Dynamic mocks using request variables&lt;/h4&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to do fuzz testing</title>
      <link>/http-rider-docs/docs/how-tos/045_fuzz_test_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/045_fuzz_test_apis/</guid>
      <description>
        
        
        &lt;p&gt;#### How it works?&lt;/p&gt;
&lt;h4 id=&#34;testing-an-api&#34;&gt;Testing an API&lt;/h4&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How do you share API request/responses</title>
      <link>/http-rider-docs/docs/how-tos/050_sharing_api_exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/how-tos/050_sharing_api_exchange/</guid>
      <description>
        
        
        &lt;p&gt;You can share the API request/response data by creating a unique link using the PrintShare service.&lt;/p&gt;
&lt;p&gt;Here is a quick demo of how the feature works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/ht/050/print-share-demo.gif&#34; alt=&#34;Print Share Demo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Please see &lt;a href=&#34;https://github.com/namuan/print-rider-py&#34;&gt;here&lt;/a&gt; if you want to run the server.
Once running, you can configure the server in the configuration.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Installation</title>
      <link>/http-rider-docs/docs/getting-started/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/getting-started/installation/</guid>
      <description>
        
        
        &lt;h4 id=&#34;macosx&#34;&gt;MacOSX&lt;/h4&gt;
&lt;p&gt;Download and install the latest release from&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/namuan/http-rider-osx/releases/latest&#34;&gt;Mac OS App&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the application is not available on AppStore, you may have to manually accept that you&amp;rsquo;d like to open this app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/gs/050/httprider-installation-warning.png&#34; alt=&#34;Mac Warning&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go to Mac Preferences&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/gs/050/system-pref-security.png&#34; alt=&#34;Mac Preferences&#34;&gt;&lt;/p&gt;
&lt;p&gt;And click &amp;ldquo;Open Anyway&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/gs/050/security-open-anyway.png&#34; alt=&#34;Open Anyway&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/namuan/http-rider-win/releases/latest&#34;&gt;Windows App&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;It is easy to setup HttpRider from source. Make you that you have Python3+ installed on your machine.&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;https://github.com/namuan/http-rider/archive/master.zip&#34;&gt;latest release&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd http-rider-master # Unzipped folder name
$ python3 --version # To validate python installation
$ make setup
$ make run
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Quick Start</title>
      <link>/http-rider-docs/docs/getting-started/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/getting-started/quick-start/</guid>
      <description>
        
        
        
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rWmvwVuuN6I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Configuration Reference</title>
      <link>/http-rider-docs/docs/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/getting-started/configuration/</guid>
      <description>
        
        
        &lt;p&gt;The configuration dialog is opened by clicking the icon on the top right corner of the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/gs/150/httprider-configuration.png&#34; alt=&#34;Configuration Toolbar Button&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once clicked, it&amp;rsquo;ll open up the configuration dialog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/http-rider-docs/images/gs/150/httprider-config-dialog.png&#34; alt=&#34;Configuration Dialog&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;requests&#34;&gt;Requests&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Timeout (secs)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Number of seconds HttpRider waits for the response before timing out and closing the connection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow Redirects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If checked, HttpRider will automatically follow if the server returns an HTTP status of &lt;code&gt;301&lt;/code&gt; or &lt;code&gt;302&lt;/code&gt; or &lt;code&gt;307&lt;/code&gt;.
In case of either of these HTTP statuses, the response location header contains the link to follow.&lt;/p&gt;
&lt;p&gt;If the configuration is checked, HttpRider will only display the last request in the Http exchange view.&lt;/p&gt;
&lt;h4 id=&#34;http-proxy&#34;&gt;HTTP Proxy&lt;/h4&gt;
&lt;p&gt;If configured, HttpRider will use the available proxy to send the request.
Sometimes, it is not possible to configure SSL with the proxy so you can disable verification if required.&lt;/p&gt;
&lt;h4 id=&#34;updates&#34;&gt;Updates&lt;/h4&gt;
&lt;p&gt;Checks if a new version of HttpRider is available on start up.
If a new version is available then you&amp;rsquo;ll see an option to download the new version on the main window.&lt;/p&gt;
&lt;h4 id=&#34;printshare&#34;&gt;Print/Share&lt;/h4&gt;
&lt;p&gt;Configures the server to use when sharing API request/responses.
Please check &lt;a href=&#34;/http-rider-docs/docs/how-tos/050_sharing_api_exchange/&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Shortcuts Reference</title>
      <link>/http-rider-docs/docs/getting-started/shortcuts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/http-rider-docs/docs/getting-started/shortcuts/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Few Important Shortcuts&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ctrl/Cmd + I&lt;/strong&gt; : Insert environment or other variables in a request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ctrl/Cmd + Enter&lt;/strong&gt; : Sends currently select request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ctrl/Cmd + S&lt;/strong&gt; : Saves the project&lt;/p&gt;

&lt;/div&gt;

&lt;h4 id=&#34;working-with-projects&#34;&gt;Working with Projects&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + N&lt;/td&gt;
&lt;td&gt;New Project&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + O&lt;/td&gt;
&lt;td&gt;Open Project&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + S&lt;/td&gt;
&lt;td&gt;Save Project&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;running-and-exporting-requests&#34;&gt;Running and Exporting Request(s)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + Enter&lt;/td&gt;
&lt;td&gt;Send Request&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + Ctrl/Cmd + Enter&lt;/td&gt;
&lt;td&gt;Send All Requests&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + E&lt;/td&gt;
&lt;td&gt;Export Request&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Short + Ctrl/Cmd + E&lt;/td&gt;
&lt;td&gt;Export All Requests&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;working-with-http-request&#34;&gt;Working with HTTP Request&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + I&lt;/td&gt;
&lt;td&gt;Insert Variable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + M&lt;/td&gt;
&lt;td&gt;Select HTTP Method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl/Cmd + L&lt;/td&gt;
&lt;td&gt;Select HTTP URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + D&lt;/td&gt;
&lt;td&gt;Select Description Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + H&lt;/td&gt;
&lt;td&gt;Select Headers Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Q&lt;/td&gt;
&lt;td&gt;Select Queries Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + F&lt;/td&gt;
&lt;td&gt;Select Form Params Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + B&lt;/td&gt;
&lt;td&gt;Select Request Body Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + M&lt;/td&gt;
&lt;td&gt;Select Mocked Response Tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
